  int id_counter = 1;
  list<string> keys;
  
  // first state
  ParserState *initial = new ParserState(id_counter);
  id_counter++;
  list<string> empty_list;
  list<string> starter_item_elements;
  starter_item_elements.push_back(amap.begin()->first);
  Item * starter = new Item("S", empty_list, starter_item_elements);
  initial->addItem(starter);
  for (auto it = amap.begin(); it != amap.end(); ++it){
    keys.push_front(it->first);
    for (auto item : it->second){
      list<string> right_hand_side;
      Item * thing = new Item();
      thing->addKey(it->first);
      // if item contains " " and more.
      if(item.find(" ") != string::npos){
        string temp = item;
        while(temp.find(" ") != string::npos){
          string next_item = temp.substr(0, temp.find(" "));
          right_hand_side.push_back(next_item);
          temp = temp.erase(0, temp.find(" ") + 1);
        }
        right_hand_side.push_back(temp);
      } else {
        right_hand_side.push_back(item);
      }
      thing->addLHS(empty_list);
      thing->addRHS(right_hand_side);
      initial->addItem(thing);
    }
  }

  generateSubStates(initial, id_counter, keys);

  // Ok. Let's get to business. Let's see if we can accept the tokens.
  ifstream inFile;
  inFile.open(argv[1]);
  list<string> stream; 
  string token = "";
  while (getline(inFile, token)){
    if (token.find(":") != string::npos){
      token = token.substr(0, (token.find(":")));
    }
    else if (token.find("[") != string::npos && token.find("]") != string::npos){
      token = token.substr(0, (token.find("[") - 1));
    }
    else{
      cout << "\nline had neither [] or :\n";
    }
    if(token == " "){
      token = "~";
    }
    stream.push_back(token);
  }
  cout << "\nTesting tokens with given token stream: ";
  for(auto token : stream){
    cout << token << " ";
  }
  cout << endl;
  if (initial->parseTokens(stream)){
    cout << "The tokens ARE ACCEPTED given the grammar\n";
  } else {
    cout << "The tokens ARE NOT ACCEPTED in the grammar\n";
  }

  writeToDOT(initial);
  return 0;
}

void printMap(map<string, list<string> > m){
  for (auto it = m.begin(); it != m.end(); ++it)
  {
    cout << it->first;
    cout << ": ";
    for (auto item : it->second)
    {
      cout << item << " | ";
    }
    cout << "\n";
  }
}

void writeToDOT(ParserState *state)
{
  ofstream outStream("parser.dot");
  outStream << "digraph automaton {\n";
  outStream << "\tgraph[rankdir = \"LR\"]\n";
  outStream << "\tratio = auto;\n";
  // Pass outstream into initial ParserState to_dot(out);
  // The following two lines are examples of states
  state->to_dot(outStream);
  // This is an example of an edge
  for (auto edge : global_edges)
  {
    outStream << "\tstate" + to_string(edge.getSrc()->getID()) + "->state" + to_string(edge.getTgt()->getID()) + "[penwidth = 5 fontcolor = \"black\" label = \"" + edge.getToken() + "\"];\n";
  }

  outStream << "}\n";
  outStream.close();
  cout << "\nParser written to parser.dot. Type 'make dot' to generate the .png image\n\n";
}

void generateSubStates(ParserState *currentState, int &counter, list<string> keys){
  for (auto item : currentState->getItems()){
    bool isTerminal = true;
    // if there is still stuff to be discovered.
    if (item->getRHS().size() > 0){
      // 1. generate a state if necessary
      ParserState * newState = new ParserState(counter);
      counter++;
      string edge_key = item->getRHS().front();
      list<string> new_lhs = item->getLHS();
      list<string> new_rhs = item->getRHS();

      new_lhs.push_back(edge_key);
      new_rhs.pop_front();
      Item *im = new Item(item->getKey(), new_lhs, new_rhs);
      newState->addItem(im);

      for(auto key : keys){
        if(key == edge_key){
          isTerminal = false; 
        }
      }
      Edge tie = Edge(currentState, newState, edge_key, isTerminal);
      currentState->addOutgoingEdge(tie);
      global_edges.push_back(tie);
      // 2. call generateSubStates on that state.
      generateSubStates(newState, counter, keys);
    }
  }
}
